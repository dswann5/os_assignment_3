Daniel Swann and Jerald Liu
dswann5@jhu.edu and liu.jerald@gmail.com
Assignment 3

Part 1: Study, Design, Log

The process that wants to give up its CPU must acquire the ptable.lock, release any other locks it has, update its proc state and call sched(). Sched() checks for the previously mentioned conditions. Since the ptable lock is held, the CPU should be running w/interrups disabled. Sched() calls swtch() to save the current context in proc->context. Then we switch to the scheduler context given by cpu->scheduler. Swtch() returns on scheduler's stack as though scheduler's swtch had returned. The scheduler is infinitely looping to find a process to run and to switch to it. It finds a process that is RUNNABLE, sets proc, switches to the process' page table with switchuvm, marks the process as RUNNING, and finally calls swtch() to start running the new process.

Sleep() and wakeup() are used to prevent processes from having to continuously check whether a condition has been met that may be dependent on another process. A process will call sleep(), wait for the wakeup() call in another process, and will continue executing when it has been woken up. Sleep() takes an arbitrary channel argument that allows a process to sleep on a specific channel aka the "wait channel". It releases the CPU from the calling process to do other work for other processes. Wakeup() also takes a channel argument that wakes all processes sleeping on the channel, causing the sleep() calls to return.

Sleep() begins with sanity checks: there must be a current process, and sleep() must have been passed a lock. Sleep acquires the ptable.lock. The process going to sleep holds both the ptable.lock and lk. This is necessary in the caller to ensure no other process could start a call to wakeup(). Now that sleep holds the ptable.lock, it's safe to release lk. Some other process may start a call to wakeup(), but will not run until it can acquire the ptable.lock, so it must wait until sleep() has finished putting process to sleep(), keeping wakeup() from missing sleep(). If the lk is the same as the ptable.lock, then there would be a deadlock. Sleep() considers the acquire and release to cancel each other out, so it sleeps(). Now that the ptable.lock is held (and only the ptable.lock is held) sleep() can record the sleep channel, change proc state to SLEEPING, and call sched. Eventually a process calls wakeup(). Wakeup() acquires the ptable lock and calls wakeup1(). Since we are manipulating process state, we have to make sure that sleep() and wakeup() do not miss each other. When looping through processes, wakeup1() switches processes on the same channel that are SLEEPING to RUNNABLE. The scheduler will see that the process is ready to be run. Wakeup must be called holding a lock that prevents observation of whatever the wakeup condition is. Sleeping processes won't miss a wakeup as a result. At all times before a process checks the condition until after it sleeps, it holds either a lock on the condition or ptable.lock or both. Since wakeup() executes holding both locks, wakeup must execute either before the potential sleeper checks the condition, or after the potential sleeper has completed putting itself to sleep.

Part 2 Additions:
1) Minimize number of processes to examine
Maintain a cache of pointers of indeces of processes that have called sleep in order to excluisively check those processes upon calling wakeup().
2) Minimize number of machine instructions for which the process table lock must be held in wakeup()

Part 3 Additions:

